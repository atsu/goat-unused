// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import kafka "github.com/confluentinc/confluent-kafka-go/kafka"
import mock "github.com/stretchr/testify/mock"

// KafkaStreamConfig is an autogenerated mock type for the KafkaStreamConfig type
type KafkaStreamConfig struct {
	mock.Mock
}

// ChannelProduce provides a mock function with given fields: topic, value
func (_m *KafkaStreamConfig) ChannelProduce(topic *string, value []byte) {
	_m.Called(topic, value)
}

// Close provides a mock function with given fields:
func (_m *KafkaStreamConfig) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields: ms
func (_m *KafkaStreamConfig) Flush(ms int) int {
	ret := _m.Called(ms)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(ms)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FullTopic provides a mock function with given fields: t
func (_m *KafkaStreamConfig) FullTopic(t string) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetBrokers provides a mock function with given fields:
func (_m *KafkaStreamConfig) GetBrokers() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetConsumer provides a mock function with given fields:
func (_m *KafkaStreamConfig) GetConsumer() *kafka.Consumer {
	ret := _m.Called()

	var r0 *kafka.Consumer
	if rf, ok := ret.Get(0).(func() *kafka.Consumer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Consumer)
		}
	}

	return r0
}

// GetPrefix provides a mock function with given fields:
func (_m *KafkaStreamConfig) GetPrefix() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProducer provides a mock function with given fields:
func (_m *KafkaStreamConfig) GetProducer() *kafka.Producer {
	ret := _m.Called()

	var r0 *kafka.Producer
	if rf, ok := ret.Get(0).(func() *kafka.Producer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Producer)
		}
	}

	return r0
}

// NewConsumer provides a mock function with given fields: km
func (_m *KafkaStreamConfig) NewConsumer(km *kafka.ConfigMap) (*kafka.Consumer, error) {
	ret := _m.Called(km)

	var r0 *kafka.Consumer
	if rf, ok := ret.Get(0).(func(*kafka.ConfigMap) *kafka.Consumer); ok {
		r0 = rf(km)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Consumer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kafka.ConfigMap) error); ok {
		r1 = rf(km)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProducer provides a mock function with given fields: km
func (_m *KafkaStreamConfig) NewProducer(km *kafka.ConfigMap) (*kafka.Producer, error) {
	ret := _m.Called(km)

	var r0 *kafka.Producer
	if rf, ok := ret.Get(0).(func(*kafka.ConfigMap) *kafka.Producer); ok {
		r0 = rf(km)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Producer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kafka.ConfigMap) error); ok {
		r1 = rf(km)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Produce provides a mock function with given fields: topic, value
func (_m *KafkaStreamConfig) Produce(topic *string, value []byte) error {
	ret := _m.Called(topic, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, []byte) error); ok {
		r0 = rf(topic, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProducerDefaults provides a mock function with given fields:
func (_m *KafkaStreamConfig) ProducerDefaults() *kafka.ConfigMap {
	ret := _m.Called()

	var r0 *kafka.ConfigMap
	if rf, ok := ret.Get(0).(func() *kafka.ConfigMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.ConfigMap)
		}
	}

	return r0
}

// SetBrokers provides a mock function with given fields: brokers
func (_m *KafkaStreamConfig) SetBrokers(brokers string) {
	_m.Called(brokers)
}

// SetDeliveryError provides a mock function with given fields: f
func (_m *KafkaStreamConfig) SetDeliveryError(f func(*kafka.Message)) {
	_m.Called(f)
}

// SetFlags provides a mock function with given fields:
func (_m *KafkaStreamConfig) SetFlags() {
	_m.Called()
}

// SetPrefix provides a mock function with given fields: prefix
func (_m *KafkaStreamConfig) SetPrefix(prefix string) {
	_m.Called(prefix)
}

// SetTopic provides a mock function with given fields: topic
func (_m *KafkaStreamConfig) SetTopic(topic string) {
	_m.Called(topic)
}
