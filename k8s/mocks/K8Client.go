// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import appsv1 "k8s.io/api/apps/v1"
import batchv1 "k8s.io/api/batch/v1"
import corev1 "k8s.io/api/core/v1"
import extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
import k8s "github.com/atsu/goat/k8s"
import mock "github.com/stretchr/testify/mock"
import rbacv1 "k8s.io/api/rbac/v1"
import rest "k8s.io/client-go/rest"
import runtime "k8s.io/apimachinery/pkg/runtime"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import v1beta1 "k8s.io/api/batch/v1beta1"
import watch "k8s.io/apimachinery/pkg/watch"

// K8Client is an autogenerated mock type for the K8Client type
type K8Client struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: rc
func (_m *K8Client) Authenticate(rc *rest.Config) error {
	ret := _m.Called(rc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rest.Config) error); ok {
		r0 = rf(rc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *K8Client) Config() *rest.Config {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// DeleteCollection provides a mock function with given fields: namespace, obj, opts, listOpts
func (_m *K8Client) DeleteCollection(namespace string, obj runtime.Object, opts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	ret := _m.Called(namespace, obj, opts, listOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, runtime.Object, *v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = rf(namespace, obj, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteList provides a mock function with given fields: namespace, list
func (_m *K8Client) DeleteList(namespace string, list *corev1.List) error {
	ret := _m.Called(namespace, list)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *corev1.List) error); ok {
		r0 = rf(namespace, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObject provides a mock function with given fields: namespace, object
func (_m *K8Client) DeleteObject(namespace string, object runtime.Object) error {
	ret := _m.Called(namespace, object)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, runtime.Object) error); ok {
		r0 = rf(namespace, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClusterRole provides a mock function with given fields: name, options
func (_m *K8Client) GetClusterRole(name string, options v1.GetOptions) (*rbacv1.ClusterRole, error) {
	ret := _m.Called(name, options)

	var r0 *rbacv1.ClusterRole
	if rf, ok := ret.Get(0).(func(string, v1.GetOptions) *rbacv1.ClusterRole); ok {
		r0 = rf(name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.ClusterRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.GetOptions) error); ok {
		r1 = rf(name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterRoleBinding provides a mock function with given fields: name, options
func (_m *K8Client) GetClusterRoleBinding(name string, options v1.GetOptions) (*rbacv1.ClusterRoleBinding, error) {
	ret := _m.Called(name, options)

	var r0 *rbacv1.ClusterRoleBinding
	if rf, ok := ret.Get(0).(func(string, v1.GetOptions) *rbacv1.ClusterRoleBinding); ok {
		r0 = rf(name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.ClusterRoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.GetOptions) error); ok {
		r1 = rf(name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigMap provides a mock function with given fields: namespace, name, options
func (_m *K8Client) GetConfigMap(namespace string, name string, options v1.GetOptions) (*corev1.ConfigMap, error) {
	ret := _m.Called(namespace, name, options)

	var r0 *corev1.ConfigMap
	if rf, ok := ret.Get(0).(func(string, string, v1.GetOptions) *corev1.ConfigMap); ok {
		r0 = rf(namespace, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1.GetOptions) error); ok {
		r1 = rf(namespace, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: namespace, name, options
func (_m *K8Client) GetDeployment(namespace string, name string, options v1.GetOptions) (*appsv1.Deployment, error) {
	ret := _m.Called(namespace, name, options)

	var r0 *appsv1.Deployment
	if rf, ok := ret.Get(0).(func(string, string, v1.GetOptions) *appsv1.Deployment); ok {
		r0 = rf(namespace, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1.GetOptions) error); ok {
		r1 = rf(namespace, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPod provides a mock function with given fields: namespace, name, options
func (_m *K8Client) GetPod(namespace string, name string, options v1.GetOptions) (*corev1.Pod, error) {
	ret := _m.Called(namespace, name, options)

	var r0 *corev1.Pod
	if rf, ok := ret.Get(0).(func(string, string, v1.GetOptions) *corev1.Pod); ok {
		r0 = rf(namespace, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1.GetOptions) error); ok {
		r1 = rf(namespace, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPodLogs provides a mock function with given fields: namespace, name, options
func (_m *K8Client) GetPodLogs(namespace string, name string, options *corev1.PodLogOptions) ([]byte, error) {
	ret := _m.Called(namespace, name, options)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, *corev1.PodLogOptions) []byte); ok {
		r0 = rf(namespace, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *corev1.PodLogOptions) error); ok {
		r1 = rf(namespace, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: namespace, name, options
func (_m *K8Client) GetRole(namespace string, name string, options v1.GetOptions) (*rbacv1.Role, error) {
	ret := _m.Called(namespace, name, options)

	var r0 *rbacv1.Role
	if rf, ok := ret.Get(0).(func(string, string, v1.GetOptions) *rbacv1.Role); ok {
		r0 = rf(namespace, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1.GetOptions) error); ok {
		r1 = rf(namespace, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleBinding provides a mock function with given fields: namespace, name, options
func (_m *K8Client) GetRoleBinding(namespace string, name string, options v1.GetOptions) (*rbacv1.RoleBinding, error) {
	ret := _m.Called(namespace, name, options)

	var r0 *rbacv1.RoleBinding
	if rf, ok := ret.Get(0).(func(string, string, v1.GetOptions) *rbacv1.RoleBinding); ok {
		r0 = rf(namespace, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1.GetOptions) error); ok {
		r1 = rf(namespace, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterRoleBindings provides a mock function with given fields: options
func (_m *K8Client) ListClusterRoleBindings(options v1.ListOptions) (*rbacv1.ClusterRoleBindingList, error) {
	ret := _m.Called(options)

	var r0 *rbacv1.ClusterRoleBindingList
	if rf, ok := ret.Get(0).(func(v1.ListOptions) *rbacv1.ClusterRoleBindingList); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.ClusterRoleBindingList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.ListOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterRoles provides a mock function with given fields: options
func (_m *K8Client) ListClusterRoles(options v1.ListOptions) (*rbacv1.ClusterRoleList, error) {
	ret := _m.Called(options)

	var r0 *rbacv1.ClusterRoleList
	if rf, ok := ret.Get(0).(func(v1.ListOptions) *rbacv1.ClusterRoleList); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.ClusterRoleList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.ListOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigMaps provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListConfigMaps(namespace string, listOptions v1.ListOptions) (*corev1.ConfigMapList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *corev1.ConfigMapList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *corev1.ConfigMapList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ConfigMapList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCronJobs provides a mock function with given fields: namespace, options
func (_m *K8Client) ListCronJobs(namespace string, options v1.ListOptions) (*v1beta1.CronJobList, error) {
	ret := _m.Called(namespace, options)

	var r0 *v1beta1.CronJobList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *v1beta1.CronJobList); ok {
		r0 = rf(namespace, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.CronJobList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListDeployments(namespace string, listOptions v1.ListOptions) (*appsv1.DeploymentList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *appsv1.DeploymentList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *appsv1.DeploymentList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.DeploymentList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIngresses provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListIngresses(namespace string, listOptions v1.ListOptions) (*extensionsv1beta1.IngressList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *extensionsv1beta1.IngressList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *extensionsv1beta1.IngressList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*extensionsv1beta1.IngressList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListJobs(namespace string, listOptions v1.ListOptions) (*batchv1.JobList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *batchv1.JobList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *batchv1.JobList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batchv1.JobList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: options
func (_m *K8Client) ListNamespaces(options v1.ListOptions) (*corev1.NamespaceList, error) {
	ret := _m.Called(options)

	var r0 *corev1.NamespaceList
	if rf, ok := ret.Get(0).(func(v1.ListOptions) *corev1.NamespaceList); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.NamespaceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.ListOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListObjects(namespace string, listOptions v1.ListOptions) (*corev1.List, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *corev1.List
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *corev1.List); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPods provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListPods(namespace string, listOptions v1.ListOptions) (*corev1.PodList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *corev1.PodList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *corev1.PodList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoleBindings provides a mock function with given fields: namespace, options
func (_m *K8Client) ListRoleBindings(namespace string, options v1.ListOptions) (*rbacv1.RoleBindingList, error) {
	ret := _m.Called(namespace, options)

	var r0 *rbacv1.RoleBindingList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *rbacv1.RoleBindingList); ok {
		r0 = rf(namespace, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBindingList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: namespace, options
func (_m *K8Client) ListRoles(namespace string, options v1.ListOptions) (*rbacv1.RoleList, error) {
	ret := _m.Called(namespace, options)

	var r0 *rbacv1.RoleList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *rbacv1.RoleList); ok {
		r0 = rf(namespace, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecrets provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListSecrets(namespace string, listOptions v1.ListOptions) (*corev1.SecretList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *corev1.SecretList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *corev1.SecretList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.SecretList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListServices(namespace string, listOptions v1.ListOptions) (*corev1.ServiceList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *corev1.ServiceList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *corev1.ServiceList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ServiceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStatefulSets provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) ListStatefulSets(namespace string, listOptions v1.ListOptions) (*appsv1.StatefulSetList, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 *appsv1.StatefulSetList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *appsv1.StatefulSetList); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.StatefulSetList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogServerInfo provides a mock function with given fields:
func (_m *K8Client) LogServerInfo() (*k8s.ServerInfo, error) {
	ret := _m.Called()

	var r0 *k8s.ServerInfo
	if rf, ok := ret.Get(0).(func() *k8s.ServerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*k8s.ServerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchDeployment provides a mock function with given fields: namespace, name, patch
func (_m *K8Client) PatchDeployment(namespace string, name string, patch []byte) (*appsv1.Deployment, error) {
	ret := _m.Called(namespace, name, patch)

	var r0 *appsv1.Deployment
	if rf, ok := ret.Get(0).(func(string, string, []byte) *appsv1.Deployment); ok {
		r0 = rf(namespace, name, patch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []byte) error); ok {
		r1 = rf(namespace, name, patch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportedObject provides a mock function with given fields: object
func (_m *K8Client) SupportedObject(object runtime.Object) (bool, string) {
	ret := _m.Called(object)

	var r0 bool
	if rf, ok := ret.Get(0).(func(runtime.Object) bool); ok {
		r0 = rf(object)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(runtime.Object) string); ok {
		r1 = rf(object)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// UpdateClusterRole provides a mock function with given fields: obj
func (_m *K8Client) UpdateClusterRole(obj *rbacv1.ClusterRole) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rbacv1.ClusterRole) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClusterRoleBinding provides a mock function with given fields: obj
func (_m *K8Client) UpdateClusterRoleBinding(obj *rbacv1.ClusterRoleBinding) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rbacv1.ClusterRoleBinding) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfigMap provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateConfigMap(namespace string, obj *corev1.ConfigMap) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *corev1.ConfigMap) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCronJob provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateCronJob(namespace string, obj *v1beta1.CronJob) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1beta1.CronJob) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeployment provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateDeployment(namespace string, obj *appsv1.Deployment) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *appsv1.Deployment) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIngress provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateIngress(namespace string, obj *extensionsv1beta1.Ingress) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *extensionsv1beta1.Ingress) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJob provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateJob(namespace string, obj *batchv1.Job) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *batchv1.Job) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateList provides a mock function with given fields: namespace, list
func (_m *K8Client) UpdateList(namespace string, list *corev1.List) error {
	ret := _m.Called(namespace, list)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *corev1.List) error); ok {
		r0 = rf(namespace, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateObject provides a mock function with given fields: namespace, object
func (_m *K8Client) UpdateObject(namespace string, object runtime.Object) error {
	ret := _m.Called(namespace, object)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, runtime.Object) error); ok {
		r0 = rf(namespace, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePod provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdatePod(namespace string, obj *corev1.Pod) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *corev1.Pod) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRole provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateRole(namespace string, obj *rbacv1.Role) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *rbacv1.Role) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoleBinding provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateRoleBinding(namespace string, obj *rbacv1.RoleBinding) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *rbacv1.RoleBinding) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSecret provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateSecret(namespace string, obj *corev1.Secret) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *corev1.Secret) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateService provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateService(namespace string, obj *corev1.Service) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *corev1.Service) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatefulSet provides a mock function with given fields: namespace, obj
func (_m *K8Client) UpdateStatefulSet(namespace string, obj *appsv1.StatefulSet) error {
	ret := _m.Called(namespace, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *appsv1.StatefulSet) error); ok {
		r0 = rf(namespace, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchEvents provides a mock function with given fields: namespace, listOptions
func (_m *K8Client) WatchEvents(namespace string, listOptions v1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(namespace, listOptions)

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) watch.Interface); ok {
		r0 = rf(namespace, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(namespace, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
